[tool.pytest.ini_options]
addopts = "-q"
filterwarnings = [
    "error", # Fail the tests if there are any warnings.
    "ignore:^find_module\\(\\) is deprecated and slated for removal in Python 3.12; use find_spec\\(\\) instead$:DeprecationWarning:importlib",
    "ignore:^FileFinder.find_loader\\(\\) is deprecated and slated for removal in Python 3.12; use find_spec\\(\\) instead$:DeprecationWarning:importlib",
    "ignore:^pkg_resources is deprecated as an API:DeprecationWarning:pkg_resources",
    "ignore:^pkg_resources is deprecated as an API:DeprecationWarning:pyramid",
    "ignore:^Deprecated call to .pkg_resources\\.declare_namespace\\('.*'\\).\\.:DeprecationWarning:pkg_resources",
    "ignore:^'cgi' is deprecated and slated for removal in Python 3\\.13$:DeprecationWarning:webob",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["lms", "tests/unit"]
omit = [
    "*/lms/__main__.py",
    "*/lms/scripts/init_db.py",
    "lms/pshell.py",
    "lms/migrations/*",
    "lms/extensions/feature_flags/views/test.py",
    "lms/views/feature_flags_test.py",
]

[tool.coverage.paths]
source = ["src", ".tox/*tests/lib/python*/site-packages"]

[tool.coverage.report]
show_missing = true
precision = 2
fail_under = 100.00
skip_covered = true
exclude_also = [
    # # TYPE_CHECKING block is only executed while running mypy
    "if TYPE_CHECKING:"
]

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "tests/bdd/steps/_compiled_feature_steps.py",
]

[tool.ruff.lint]
select = [
  "E", "W", #  https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
  "D", # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "ARG", # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
  "BLE001", # https://docs.astral.sh/ruff/rules/blind-except/
  "R", "PLR", # https://docs.astral.sh/ruff/rules/#refactor-r
  "C", "PLC", # https://docs.astral.sh/ruff/rules/#convention-c
  "SLF", # flake-8-self

  "RUF100", # unused-noqa
]

ignore = [
    # Missing docstrings.
    "D100","D101","D102","D103","D104","D105","D106","D107",

    # "No blank lines allowed after function docstring" conflicts with the
    # Black code formatter which insists on inserting blank lines after
    # function docstrings.
    "D202",

    # "1 blank line required before class docstring" conflicts with another
    # pydocstyle rule D211 "No blank lines allowed before class docstring".
    "D203",

    # "Multi-line docstring summary should start at the first line"
    # and "Multi-line docstring summary should start at the second line".
    # These two rules conflict with each other so you have to disable one of them.
    # How about we disable them both? PEP 257 says either approach is okay:
    #
    # > The summary line may be on the same line as the opening quotes or on
    # > the next line.
    # >
    # > https://peps.python.org/pep-0257/#multi-line-docstrings
    "D212",
    "D213",

    # We use Black to format our code automatically, so we don't need PyLint to
    # check formatting for us.
    "E501", # line-too-long

    "PLR2004", # Magic values, we mostly get it on HTTP status codes

    # Disabled during the pylint migration, ideally we'll enable this after we are settled in ruff
    "RET504",
    "RET501",
    "PLR6301",
    "E721",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Just disable name style checking for the tests, because we
    # frequently use lots of argument names that don't conform.
    # For example we frequently create pytest fixtures that aren't named in
    # snake_case, such as a fixture that returns a mock of the FooBar class would
    # be named FooBar in CamelCase.
    "N",
    # We are more lax about  comment formatting in the tests
    "D",
    
    "PLR0913",

    # Lots of test methods don't use self, but we still want to group our tests
    # into classes.
    "PLR6301",

    "PLR0917", # too-many-arguments
    "PLC2701", # private import
    "PLR0904", # too-many-public-methods
] 

[tool.mypy]
python_version = 3.11
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true

disable_error_code = [
    "import-untyped",
]

[[tool.mypy.overrides]]
module= [
  "tests.*",
  "lms.migrations.*"
]
ignore_errors = true
