[tool.pytest.ini_options]
addopts = "-q"
filterwarnings = [
    "error", # Fail the tests if there are any warnings.
    "ignore:^find_module\\(\\) is deprecated and slated for removal in Python 3.12; use find_spec\\(\\) instead$:DeprecationWarning:importlib",
    "ignore:^FileFinder.find_loader\\(\\) is deprecated and slated for removal in Python 3.12; use find_spec\\(\\) instead$:DeprecationWarning:importlib",
    "ignore:^pkg_resources is deprecated as an API:DeprecationWarning:pkg_resources",
    "ignore:^pkg_resources is deprecated as an API:DeprecationWarning:pyramid",
    "ignore:^Deprecated call to .pkg_resources\\.declare_namespace\\('.*'\\).\\.:DeprecationWarning:pkg_resources",
    "ignore:^'cgi' is deprecated and slated for removal in Python 3\\.13$:DeprecationWarning:webob",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["lms", "tests/unit"]
omit = [
    "*/lms/__main__.py",
    "*/lms/scripts/init_db.py",
    "lms/pshell.py",
    "lms/migrations/*",
    "lms/extensions/feature_flags/views/test.py",
    "lms/views/feature_flags_test.py",
]

[tool.coverage.paths]
source = ["src", ".tox/*tests/lib/python*/site-packages"]

[tool.coverage.report]
show_missing = true
precision = 2
fail_under = 100.00
skip_covered = true
exclude_also = [
    # # TYPE_CHECKING block is only executed while running mypy
    "if TYPE_CHECKING:"
]

[tool.pylint.main]
jobs = 0 # Use one process for CPU.

load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.check_elif",
    "pylint.extensions.docparams",
    "pylint.extensions.mccabe",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.redefined_variable_type",
]


# Fail if there are *any* messages from PyLint.
# The letters refer to PyLint's message categories, see
# https://pylint.pycqa.org/en/latest/messages/messages_introduction.html
fail-on = ["C", "E", "F", "I", "R", "W"]

[tool.pylint.messages_control]
ignore-paths=[
]
enable = [
    "bad-inline-option",
    "deprecated-pragma",
    "useless-suppression",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-zero",
    "use-implicit-booleaness-not-comparison-to-string",
]
disable = [
    # Docstrings are encouraged but we don't want to enforce that everything
    # must have a docstring.
    "missing-docstring",

    # We don't always want to have to put a `:return:` in a docstring.
    "missing-return-doc",

    # We don't always want to have to put an `:rtype:` in a docstring.
    "missing-return-type-doc",

    # We don't want to have to document the type of every parameter with a
    # `:type:` in the docstring.
    "missing-type-doc",

    # We use isort to sort and group our imports, so we don't need PyLint to
    # check them for us.
    "ungrouped-imports",
    "wrong-import-order",

    # We use Black to format our code automatically, so we don't need PyLint to
    # check formatting for us.
    "line-too-long",

    "too-few-public-methods",

    # Issues to disable this for false positives, disabling it globally in the meantime https://github.com/PyCQA/pylint/issues/214
    "duplicate-code",

    # False positives and flaky behaviour
    "unsubscriptable-object",

    # Ported to ruff
    "unused-argument",
    "broad-exception-caught",
    "too-many-arguments",
    "import-outside-toplevel",
    "too-many-statements",
    "protected-access",
    "singleton-comparison",

    # Not supported by ruff
    "too-many-ancestors",
    "abstract-method",
    "cyclic-import",
    "unsupported-assignment-operation",
    "too-many-instance-attributes",

    # Mostly false positives, better served by mypy
    "not-callable",
    "no-member",

]

good-names = [
    "i", "j", "k", "ex", "Run", "_", # PyLint's default good names.
    "tm", "db", "ai",
]

[tool.pylint.reports]
output-format = "colorized"
score = "no"

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "tests/bdd/steps/_compiled_feature_steps.py",
]


[tool.ruff.lint]
select = [
  "E", "W", #  https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
  "D", # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "ARG", # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
  "BLE001", # https://docs.astral.sh/ruff/rules/blind-except/
  "R", "PLR", # https://docs.astral.sh/ruff/rules/#refactor-r
  "C", "PLC", # https://docs.astral.sh/ruff/rules/#convention-c
  "SLF", # flake-8-self

  "RUF100", # unused-noqa
]

ignore = [
    # Missing docstrings.
    "D100","D101","D102","D103","D104","D105","D106","D107",

    # "No blank lines allowed after function docstring" conflicts with the
    # Black code formatter which insists on inserting blank lines after
    # function docstrings.
    "D202",

    # "1 blank line required before class docstring" conflicts with another
    # pydocstyle rule D211 "No blank lines allowed before class docstring".
    "D203",

    # "Multi-line docstring summary should start at the first line"
    # and "Multi-line docstring summary should start at the second line".
    # These two rules conflict with each other so you have to disable one of them.
    # How about we disable them both? PEP 257 says either approach is okay:
    #
    # > The summary line may be on the same line as the opening quotes or on
    # > the next line.
    # >
    # > https://peps.python.org/pep-0257/#multi-line-docstrings
    "D212",
    "D213",

    # We use Black to format our code automatically, so we don't need PyLint to
    # check formatting for us.
    "E501", # line-too-long

    "PLR2004", # Magic values, we mostly get it on HTTP status codes

    # Disabled during the pylint migration, ideally we'll enable this after we are settled in ruff
    "RET504",
    "RET501",
    "PLR6301",
    "PLR6201",
    "PLR1702",
    "C405",
    "C401",
    "PLC1901",
    "E721",
    "C414",
    "C901",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Just disable name style checking for the tests, because we
    # frequently use lots of argument names that don't conform.
    # For example we frequently create pytest fixtures that aren't named in
    # snake_case, such as a fixture that returns a mock of the FooBar class would
    # be named FooBar in CamelCase.
    "N",
    # We are more lax about  comment formatting in the tests
    "D",
    
    "PLR0913",

    # Lots of test methods don't use self, but we still want to group our tests
    # into classes.
    "PLR6301",

    "PLR0917", # too-many-arguments
    "PLC2701", # private import
    "PLR0904", # too-many-public-methods
] 

[tool.hdev]
project_name = "lms"
project_type = "application"

[tool.mypy]
python_version = 3.11
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true


disable_error_code = [
    "import-untyped",
]

[[tool.mypy.overrides]]
module= [
  "tests.*",
  "lms.migrations.*"
]
ignore_errors = true
