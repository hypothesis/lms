[tox]
envlist = tests
skipsdist = true
minversion = 3.16.1
requires =
  tox-pip-sync
  tox-pyenv
  tox-envfile
  tox-run-command
tox_pyenv_fallback = false

[testenv]
parallel_show_output = true
skip_install = true
passenv =
    HOME
    EXTRA_DEPS
    {tests,functests,bddtests}: TEST_DATABASE_URL
    {tests,functests}: PYTEST_ADDOPTS
    dev: DEBUG
    dev: FEATURE_FLAG_*
    dev: GOOGLE_APP_ID
    dev: GOOGLE_CLIENT_ID
    dev: GOOGLE_DEVELOPER_KEY
    dev: ONEDRIVE_CLIENT_ID
    dev: ADMIN_AUTH_GOOGLE_CLIENT_ID
    dev: ADMIN_AUTH_GOOGLE_CLIENT_SECRET
    dev: H_CLIENT_ID
    dev: H_CLIENT_SECRET
    dev: H_JWT_CLIENT_ID
    dev: H_JWT_CLIENT_SECRET
    dev: LMS_SECRET
    dev: SENTRY_DSN
    dev: VITALSOURCE_API_KEY
    dev: BLACKBOARD_API_CLIENT_ID
    dev: BLACKBOARD_API_CLIENT_SECRET
    dev: JSTOR_API_URL
    dev: JSTOR_API_SECRET
deps =
    dev: -r requirements/dev.txt
    {format,checkformatting}: -r requirements/format.txt
    lint: -r requirements/lint.txt
    tests: -r requirements/tests.txt
    coverage: -r requirements/coverage.txt
    functests: -r requirements/functests.txt
    bddtests: -r requirements/bddtests.txt
    dockercompose: -r requirements/dockercompose.txt
depends =
    coverage: tests
setenv =
    PYTHONUNBUFFERED = 1
    # Ensure the `lms` package can be found with `make shell`
    dev: PYTHONPATH = .
    dev: DATABASE_URL = {env:DATABASE_URL:postgresql://postgres@localhost:5433/postgres}
    dev: DEV = {env:DEV:true}
    dev: BROKER_URL = {env:BROKER_URL:amqp://guest:guest@localhost:5674//}
    dev: FEATURE_FLAGS_COOKIE_SECRET = {env:FEATURE_FLAGS_COOKIE_SECRET:notasecret}
    dev: FEATURE_FLAGS_ALLOWED_IN_COOKIE = {env:FEATURE_FLAGS_ALLOWED_IN_COOKIE:vitalsource submit_on_annotation}
    dev: H_AUTHORITY = {env:H_AUTHORITY:lms.hypothes.is}
    dev: H_API_URL_PUBLIC = {env:H_API_URL_PUBLIC:http://localhost:5000/api/}
    dev: H_API_URL_PRIVATE = {env:H_API_URL_PRIVATE:http://localhost:5000/api/}
    dev: OAUTH2_STATE_SECRET = {env:OAUTH2_STATE_SECRET:notasecret}
    dev: RPC_ALLOWED_ORIGINS = {env:RPC_ALLOWED_ORIGINS:http://localhost:5000}
    dev: VIA_URL = {env:VIA_URL:http://localhost:9083}
    dev: SENTRY_ENVIRONMENT = {env:SENTRY_ENVIRONMENT:dev}
    dev: SESSION_COOKIE_SECRET = {env:SESSION_COOKIE_SECRET:notasecret}
    # Number of gunicorn workers: https://docs.gunicorn.org/en/stable/settings.html#worker-processes
    dev: WEB_CONCURRENCY = {env:WEB_CONCURRENCY:2}
    OBJC_DISABLE_INITIALIZE_FORK_SAFETY = YES
    VIA_SECRET = not_a_secret
whitelist_externals =
    tests,functests,bddtests: sh
commands =
    dev: {posargs:supervisord -c conf/supervisord-dev.conf}
    tests: sh bin/create-db lms_test
    functests: sh bin/create-db lms_functests
    bddtests: sh bin/create-db lms_bddtests
    tests: coverage run -m pytest -v {posargs:tests/unit/}
    coverage: -coverage combine
    coverage: coverage report
    functests: pytest {posargs:tests/functional/}
    bddtests: behave {posargs:tests/bdd/}
    lint: pylint lms bin
    lint: pylint --rcfile=tests/.pylintrc tests
    lint: pydocstyle lms tests bin
    lint: pycodestyle lms tests bin
    format: black lms tests bin
    format: isort --quiet --atomic lms tests bin
    checkformatting: black --check lms tests bin
    checkformatting: isort --quiet --check-only lms tests bin
    dockercompose: docker-compose {posargs}
sitepackages = {env:SITE_PACKAGES:false}

[testenv:dev]
# By default when you Ctrl-c the `make dev` command tox is too aggressive about
# killing supervisor. tox kills supervisor before supervisor has had time to
# stop or kill its child processes, resulting in detached child processes being
# left running and other problems.
#
# Fix this by configuring tox to wait a long time before sending any further
# SIGINTs (after the first one) or SIGTERMs or SIGKILLs to supervisor.
# Just trust supervisor to clean up all its child processes and stop.
suicide_timeout = 60.0
interrupt_timeout = 60.0
terminate_timeout = 60.0
