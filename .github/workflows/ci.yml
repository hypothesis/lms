name: CI
on:
  push:
  workflow_dispatch:
jobs:
  Format:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5-alpine
        ports:
        - 5432:5432
    env:
      TEST_DATABASE_URL: postgresql://postgres@localhost:5432/lms_test
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Cache the .tox dir
        uses: actions/cache@v3
        with:
          path: .tox
          key: format-${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('requirements/*') }}
          restore-keys: |
            format-${{ runner.os }}-tox-
      - name: Create test database
        run: psql -U postgres -h localhost -p 5432 -c 'CREATE DATABASE lms_test'
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - run: python -m pip install tox
      - run: tox -e checkformatting
  Lint:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5-alpine
        ports:
        - 5432:5432
    env:
      TEST_DATABASE_URL: postgresql://postgres@localhost:5432/lms_test
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Cache the .tox dir
        uses: actions/cache@v3
        with:
          path: .tox
          key: lint-${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('requirements/*') }}
          restore-keys: |
            lint-${{ runner.os }}-tox-
      - name: Create test database
        run: psql -U postgres -h localhost -p 5432 -c 'CREATE DATABASE lms_test'
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - run: python -m pip install tox
      - run: tox -e lint
  Tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5-alpine
        ports:
        - 5432:5432
    env:
      TEST_DATABASE_URL: postgresql://postgres@localhost:5432/lms_test
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Cache the .tox dir
        uses: actions/cache@v3
        with:
          path: .tox
          key: tests-${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('requirements/*') }}
          restore-keys: |
            tests-${{ runner.os }}-tox-
      - name: Create test database
        run: psql -U postgres -h localhost -p 5432 -c 'CREATE DATABASE lms_test'
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - run: python -m pip install tox
      - run: tox -e tests
      - name: Upload coverage file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.*
  Coverage:
    needs: tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5-alpine
        ports:
        - 5432:5432
    env:
      TEST_DATABASE_URL: postgresql://postgres@localhost:5432/lms_test
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Cache the .tox dir
        uses: actions/cache@v3
        with:
          path: .tox
          key: coverage-${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('requirements/*') }}
          restore-keys: |
            coverage-${{ runner.os }}-tox-
      - name: Create test database
        run: psql -U postgres -h localhost -p 5432 -c 'CREATE DATABASE lms_test'
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - name: Download coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
      - run: python -m pip install tox
      - run: tox -e coverage
  Functests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5-alpine
        ports:
        - 5432:5432
    env:
      TEST_DATABASE_URL: postgresql://postgres@localhost:5432/lms_test
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Cache the .tox dir
        uses: actions/cache@v3
        with:
          path: .tox
          key: functests-${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('requirements/*') }}
          restore-keys: |
            functests-${{ runner.os }}-tox-
      - name: Create test database
        run: psql -U postgres -h localhost -p 5432 -c 'CREATE DATABASE lms_test'
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - run: python -m pip install tox
      - run: tox -e functests
  Frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Cache the node_modules dir
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
    - name: Install
      run: yarn install --frozen-lockfile
    - name: Format
      run: make frontend-checkformatting
    - name: Lint
      run: make frontend-lint
    - name: Test
      run: make frontend-test
  BDDtests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5-alpine
        ports:
        - 5432:5432
    env:
      TEST_DATABASE_URL: postgresql://postgres@localhost:5432/lms_test
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.cfg', 'tox.ini') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Create test database
        run: psql -U postgres -h localhost -p 5432 -c 'CREATE DATABASE lms_test'
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - run: python -m pip install tox
      - run: tox -e bddtests
