# Base prospector config file, contains only settings shared by all child
# config files.
output-format: grouped
strictness: veryhigh
doc-warnings: true
max-line-length: 160
mccabe:
  run: true
pep8:
  run: true
  full: true
  disable:
    - E203  # Whitespace before ':', this sometimes conflicts with Black.
pep257:
  disable:
    - D100  # Missing docstring in public module
    - D101  # Missing docstring in public class
    - D102  # Missing docstring in public method
    - D103  # Missing docstring in public function
    - D104  # Missing docstring in public package
    - D105  # Missing docstring in magic method
    - D107  # Missing docstring in __init__
    - D202  # "No blank lines allowed after function docstring" conflicts with
            # the Black code formatter, which insists on inserting blank lines
            # after function docstrings.
    - D203  # "1 blank line required before class docstring" conflicts with
            #  another pep257 rule D211 "No blank lines allowed before class
            # docstring".
    - D212  # Multi-line docstring summary should start at the first line,
            # this conflicts with another pep257 rule
            # "Multi-line docstring summary should start at the second line".
pyflakes:
  run: true
  disable:
      - F401  # Unused import. We don't need pyflakes to detect these because
              # pylint detects them, and pylint's unused import detection
              # generates fewer false positives than pyflakes's.
pylint:
  enable:
    - relative-import
  disable:
    - line-too-long  # PEP8 checks this and doesn't complain about
                     # unavoidable long lines (such as URLs).
    - missing-docstring  # The pep257 tool reports missing docstrings to us
                         # so we don't need pylint to do so.
    - too-few-public-methods
    - ungrouped-imports  # Import grouping is automated via isort.
  options:
    # Some good names that pylint would otherwise reject:
    #
    # - _: placeholder
    # - i,j,k: counters
    # - k,v: dict iteration
    # - db,fn: common abbreviations
    # - fp: python idiom for file handles
    #
    # Some good "constant" names that pylint would otherwise reject:
    #
    # - log: common in "log = logging.getLogger(__name__)" pattern
    # - parser: common in modules that use argparse
    # - id: Commonly used as a class attribute / database column name in
    #       sqlalchemy model classes. Note that if you use id as the name of
    #       a local variable or parameter, pylint will still complain that
    #       you're shadowing the builtin.
    #
    good-names: _,i,j,k,v,e,db,fn,fp,log,parser,id,es,tm
    function-rgx: "[a-z_][a-z0-9_]{2,40}$"
pyroma:
  run: false
ignore-paths:
  - bin/
  - lib/
  - include/
  - lms/migrations/env.py
  - gunicorn.conf.py
  - node_modules/
