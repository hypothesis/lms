"""
Fix_course_AI_relationship.

Revision ID: 57b492887520
Revises: 7a4812876915
Create Date: 2022-02-11 13:34:52.339685

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "57b492887520"
down_revision = "7a4812876915"


def upgrade():
    conn = op.get_bind()

    # New nullable column for ai.id FK
    op.add_column(
        "course", sa.Column("application_instance_id", sa.Integer(), nullable=True)
    )

    # Fill up the new column based on consumer_key
    conn.execute(
        """
        UPDATE course set application_instance_id = application_instances.id from application_instances where application_instances.consumer_key = course.consumer_key"""
    )

    # Mark new column as nullable now that it has values
    op.alter_column("course", "application_instance_id", nullable=False)

    # The new column is now a FK
    op.create_foreign_key(
        op.f("fk__course__application_instance_id__application_instances"),
        "course",
        "application_instances",
        ["application_instance_id"],
        ["id"],
        ondelete="cascade",
    )

    # Delete the old PK on course
    op.drop_constraint(
        op.f("pk__course"),
        "course",
        type_="primary",
    )

    # Old column, not a FK anymore - This is optional, we could keep it for a while
    op.drop_constraint(
        op.f("fk__course__consumer_key__application_instances"),
        "course",
        type_="foreignkey",
    )
    # and can also be nullable This is optional, we could keep it for a while
    op.alter_column("course", "consumer_key", nullable=True)

    # Create a new PK based on the new column
    op.create_primary_key(
        "pk__course",
        "course",
        ["application_instance_id", "authority_provided_id"],
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
