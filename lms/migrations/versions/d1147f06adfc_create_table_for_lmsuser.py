"""Create table for LMSUser."""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

revision = "d1147f06adfc"
down_revision = "3d0c022c716c"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "lms_user",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("tool_consumer_instance_guid", sa.UnicodeText(), nullable=True),
        sa.Column("h_userid", sa.Unicode(), nullable=False),
        sa.Column("lti_id", sa.Unicode(), nullable=False),
        sa.Column("email", sa.Unicode(), nullable=True),
        sa.Column("display_name", sa.Unicode(), nullable=True),
        sa.Column(
            "created", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__lms_user")),
        sa.UniqueConstraint(
            "tool_consumer_instance_guid",
            "lti_id",
            name=op.f("uq__lms_user__tool_consumer_instance_guid"),
        ),
    )
    op.create_index(
        op.f("ix__lms_user_display_name"), "lms_user", ["display_name"], unique=False
    )
    op.create_index(
        op.f("ix__lms_user_h_userid"), "lms_user", ["h_userid"], unique=True
    )
    op.create_index(op.f("ix__lms_user_lti_id"), "lms_user", ["lti_id"], unique=False)
    op.create_index(
        op.f("ix__lms_user_tool_consumer_instance_guid"),
        "lms_user",
        ["tool_consumer_instance_guid"],
        unique=False,
    )
    op.create_table(
        "lms_user_application_instance",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("application_instance_id", sa.Integer(), nullable=True),
        sa.Column("lms_user_id", sa.Integer(), nullable=True),
        sa.Column(
            "created", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["application_instance_id"],
            ["application_instances.id"],
            name=op.f(
                "fk__lms_user_application_instance__application_instance_id__application_instances"
            ),
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["lms_user_id"],
            ["lms_user.id"],
            name=op.f("fk__lms_user_application_instance__lms_user_id__lms_user"),
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__lms_user_application_instance")),
        sa.UniqueConstraint(
            "application_instance_id",
            "lms_user_id",
            name=op.f("uq__lms_user_application_instance__application_instance_id"),
        ),
    )
    op.drop_index("ix__course_roster_authority_provided_id", table_name="course_roster")
    op.drop_index("ix__course_roster_h_userid", table_name="course_roster")
    op.drop_index("ix__course_roster_lti_role_id", table_name="course_roster")
    op.drop_table("course_roster")
    op.drop_column("grouping", "lti_context_memberships_url")
    op.create_foreign_key(
        op.f("fk__user__application_instance_id__application_instances"),
        "user",
        "application_instances",
        ["application_instance_id"],
        ["id"],
        ondelete="cascade",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk__user__application_instance_id__application_instances"),
        "user",
        type_="foreignkey",
    )
    op.add_column(
        "grouping",
        sa.Column(
            "lti_context_memberships_url", sa.TEXT(), autoincrement=False, nullable=True
        ),
    )
    op.create_table(
        "course_roster",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "authority_provided_id", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column("h_userid", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("lti_role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lti_role_id"],
            ["lti_role.id"],
            name="fk__course_roster__lti_role_id__lti_role",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="pk__course_roster"),
        sa.UniqueConstraint(
            "authority_provided_id",
            "h_userid",
            "lti_role_id",
            name="uq__course_roster__authority_provided_id",
        ),
    )
    op.create_index(
        "ix__course_roster_lti_role_id", "course_roster", ["lti_role_id"], unique=False
    )
    op.create_index(
        "ix__course_roster_h_userid", "course_roster", ["h_userid"], unique=False
    )
    op.create_index(
        "ix__course_roster_authority_provided_id",
        "course_roster",
        ["authority_provided_id"],
        unique=False,
    )
    op.drop_table("lms_user_application_instance")
    op.drop_index(
        op.f("ix__lms_user_tool_consumer_instance_guid"), table_name="lms_user"
    )
    op.drop_index(op.f("ix__lms_user_lti_id"), table_name="lms_user")
    op.drop_index(op.f("ix__lms_user_h_userid"), table_name="lms_user")
    op.drop_index(op.f("ix__lms_user_display_name"), table_name="lms_user")
    op.drop_table("lms_user")
    # ### end Alembic commands ###
